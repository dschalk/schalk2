import{t as n,a as l}from"../chunks/D9PNolux.js";import"../chunks/C1IoAzGp.js";import{h as c,y as f,T as h,f as u}from"../chunks/JypfP0gL.js";function m(o,e,s,a,p){var i;c&&f();var t=(i=e.$$slots)==null?void 0:i[s],r=!1;t===!0&&(t=e.children,r=!0),t===void 0||t(o,r?()=>a:a)}var d=n(`<nav><h1>Contents</h1> <a href="https://recursive-closures.schalk2.com/" class="svelte-1mqpwds">Recursive Closures</a> <br><br> <a href="https://blog.schalk2.com/" class="svelte-1mqpwds">Blog</a> <p>Blog (linked above) is a disorganized collection of miscellaneous ideas. It's online so I can refer to items in it in email exchanges, or during phone conversations.</p> <p>Recursive Closures is a work in progress, with nine pages mature enough for publication. They showcase the use of what I call m-M(x) closures. It's written for computer progammers, but others might find some of the pages interesting. I tried to make the virtual Rubik's cube easy to rearrange and solve.</p></nav> <div>"*******************************************************************************"</div> <!>`,1);function k(o,e){var s=d(),a=h(u(s),4);m(a,e,"default",{}),l(o,s)}export{k as component};
